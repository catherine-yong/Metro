
#include "lire_lignes.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lignes.h"


//fonction pour ajouter une valeur au debut ;
Une_ligne * ajouter_debut(Une_ligne * L, char* a, char* b, float c, float d)
{
    Une_ligne * nouv = (Une_ligne *) malloc (sizeof(Une_ligne));
    nouv -> code = a;
    nouv -> color = b;
    nouv -> intervalle = c;
    nouv -> vitesse = d;
    nouv -> suiv = L; /*suivant pointe sur tete*/
    return (nouv);
}


//fonction pour ajouter une valeur à la fin ;
Une_ligne * ajouter_fin(Une_ligne * L, char* a, char* b, float c, float d)
{
    if (L == NULL)
    {
        L = ajouter_debut(L, a, b, c, d);
    }
    else
    {
        Une_ligne * nouv = (Une_ligne *) malloc (sizeof (Une_ligne));
        nouv -> code = a;
        nouv -> color = b;
        nouv -> intervalle = c;
        nouv -> vitesse = d;
        nouv -> suiv = NULL;/*car c'est le dernier il n'y a pas de suivant*/
        
        Une_ligne * temp = L;
        while (temp -> suiv != NULL)
        {
            temp = temp -> suiv;
        }
        temp -> suiv = nouv;
    }
    return (L);
}

//fonction pour affichier la liste;
void affiche_lignes(Une_ligne * lligne)
{
    Une_ligne * L = lligne;
    while (L != NULL)
    {
        printf("%s", L -> code);
        printf("%s", L -> color);
        printf("%f", L -> intervalle);
        printf("%f", L -> vitesse);
        L = L -> suiv;
    }
}

//fonction pour désallouer la mémoire;
void detruire_lignes(Une_ligne* lligne)
{
    Une_ligne* L = lligne;
    while (L != NULL)
    {
        lligne = L;
        free(L->code);
        free(L->color);
        free(&(L->intervalle));
        free(&(L->vitesse));
        L = lligne -> suiv;
    }
}// pas encore tester

//fonction lire lignes; 
Une_ligne* lire_ligne() // pas fini !!!!
{

    FILE* fichier;
    fichier = fopen ("ligne_metro.csv", "rt");
       
    if(fichier == NULL)
    {
        printf("ouverture impossible du fichier \n");
        return 0;
    }
       
       
    char ligne[100]; /* 100 est le nombre de caractère maximal d'une ligne */
    const char* separator = ";";
    char* ptr_chaine = NULL;/* on définit un pointeur pour récuperer le "token"*/
       

    Une_ligne* L = NULL;
    L = malloc(sizeof(L));/*on créé un nouvelle élément*/
    while(fgets(ligne,100,fichier) != NULL)
    {
        ptr_chaine = strtok (ligne, separator);
        while (ptr_chaine != NULL)
        {
            printf ("%s \t", ptr_chaine);
            fscanf(fichier,"%s %s %f %f", L-> code,L->color, L-> intervalle, L->vitesse);
            ptr_chaine = strtok (NULL, separator);
        }
        printf("\n");
    }
    fclose(fichier);
       
    return 0;
}


//fonction pour chercher une ligne en fct de son code; 
Une_ligne* chercher_ligne(Une_ligne* lligne, char* code)
{
    char* c;
    while (strcmp(c, code) && lligne != NULL)
    {
        lligne = lligne -> suiv;
    }
    
    if (lligne == NULL)
    {
        return NULL;
    }
    else
    {
        return lligne;
    }
}// pas encore tester !

int main()
{

    lire_ligne();
    return 0; 
}
